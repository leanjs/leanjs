"use strict";(self.webpackChunk_leanjs_website=self.webpackChunk_leanjs_website||[]).push([[806],{5318:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>m});var t=a(7378);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(a),m=o,k=u["".concat(p,".").concat(m)]||u[m]||c[m]||r;return a?t.createElement(k,l(l({ref:n},d),{},{components:a})):t.createElement(k,l({ref:n},d))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3670:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var t=a(5773),o=(a(7378),a(5318));const r={},l="@leanjs/cli",i={unversionedId:"cli/README",id:"cli/README",title:"@leanjs/cli",description:"The LeanJS CLI provides commands to help you develop, build, and deploy your composable apps. This package also includes the Proxy Dev Server.",source:"@site/../packages/cli/README.md",sourceDirName:"cli",slug:"/cli/",permalink:"/packages/cli/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"@leanjs/core",permalink:"/packages/core/"},next:{title:"@leanjs/react",permalink:"/packages/react/"}},p={},s=[{value:"Installation",id:"installation",level:2},{value:"Basic usage",id:"basic-usage",level:2},{value:"Proxy Dev Server",id:"proxy-dev-server",level:2},{value:"Commands",id:"commands",level:2},{value:"<code>lean dev</code>",id:"lean-dev",level:3},{value:"--config NAME",id:"--config-name",level:4},{value:"--port NUMBER",id:"--port-number",level:4},{value:"<code>lean build</code>",id:"lean-build",level:3},{value:"--config NAME",id:"--config-name-1",level:4},{value:"<code>lean deploy</code>",id:"lean-deploy",level:3},{value:"--use PACKAGE",id:"--use-package",level:4},{value:"Config examples",id:"config-examples",level:2}],d={toc:s};function c(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"leanjscli"},"@leanjs/cli"),(0,o.kt)("p",null,"The LeanJS CLI provides commands to help you develop, build, and deploy your composable apps. This package also includes the ",(0,o.kt)("a",{parentName:"p",href:"#proxy-dev-server"},"Proxy Dev Server"),"."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"If you use a monorepo (recommended) execute the following command at the root of your repository:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add -D -W @leanjs/cli && yarn add -W @leanjs/core\n")),(0,o.kt)("p",null,"then in the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," of each composable app add the following ",(0,o.kt)("inlineCode",{parentName:"p"},"devDependency"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"devDependencies": {\n  "@leanjs/cli": "*"\n}\n')),(0,o.kt)("p",null,"If your app is not in a monorepo, then run the following command instead of the above:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add -D @leanjs/cli && yarn add @leanjs/core\n")),(0,o.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,o.kt)("p",null,"You need to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js")," file at the root of the repository."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"my-repo/\n\u251c\u2500 lean.config.js \ud83d\udc48\n\u251c\u2500 package.json\n")),(0,o.kt)("p",null,"The minimal ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js")," is the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// lean.config.js\n\nmodule.exports = {\n  devServer: { port: 55555 }, // use any available port here\n};\n")),(0,o.kt)("h2",{id:"proxy-dev-server"},"Proxy Dev Server"),(0,o.kt)("p",null,"There are two development servers involved when you run a composable app."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"A usual development server that watches your composable app code, builds it, and serves it at a given local address. For instance, Webpack Dev Server."),(0,o.kt)("li",{parentName:"ol"},"A proxy development server that all composable apps connect to to send some information. This dev server runs at the address defined in your ",(0,o.kt)("inlineCode",{parentName:"li"},"lean.config.js"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"devServer")," field:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// lean.config.js\n\nmodule.exports = {\n  devServer: { port: 55555 }, // \ud83d\udc48 proxy dev server\n};\n")),(0,o.kt)("p",null,"The Lean CLI ",(0,o.kt)("inlineCode",{parentName:"p"},"dev")," command starts the proxy dev server automatically when you run the first ",(0,o.kt)("inlineCode",{parentName:"p"},"lean dev")," command. You can navigate to ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:{LEAN_CONFIG_JS_DEV_SERVER_PORT}")," (e.g. localhost:55555) and see what composable apps you are running locally. If you have not run a ",(0,o.kt)("inlineCode",{parentName:"p"},"lean dev")," command, the proxy server won't be running."),(0,o.kt)("h2",{id:"commands"},"Commands"),(0,o.kt)("p",null,"Once you install ",(0,o.kt)("inlineCode",{parentName:"p"},"@leanjs/cli")," and create a ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js"),", you can execute ",(0,o.kt)("inlineCode",{parentName:"p"},"lean")," commands from your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"/s ",(0,o.kt)("inlineCode",{parentName:"p"},"scripts")," as follows:"),(0,o.kt)("h3",{id:"lean-dev"},(0,o.kt)("inlineCode",{parentName:"h3"},"lean dev")),(0,o.kt)("p",null,"It starts a development server specific for the composable app defined in the same ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," and executes its entry point ",(0,o.kt)("inlineCode",{parentName:"p"},"src/index.js|ts"),". This development server will either run the composable app at the next available port after the ",(0,o.kt)("inlineCode",{parentName:"p"},"devServer")," port defined in your ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js")," (recommended), or at a given port (e.g. using ",(0,o.kt)("inlineCode",{parentName:"p"},"lean dev --port 12345"),")."),(0,o.kt)("p",null,"This command will also connect to the local ",(0,o.kt)("a",{parentName:"p",href:"#proxy-dev-server"},"Proxy Dev Server")," and register the composable app with the address it's running at. If the local Proxy Dev Server is not running at the port defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"devServer")," field, then ",(0,o.kt)("inlineCode",{parentName:"p"},"lean dev")," will start a new Proxy Dev Server using the ",(0,o.kt)("inlineCode",{parentName:"p"},"devServer")," port."),(0,o.kt)("p",null,"Arguments:"),(0,o.kt)("h4",{id:"--config-name"},"--config NAME"),(0,o.kt)("p",null,"This argument is ",(0,o.kt)("strong",{parentName:"p"},"requried"),". The NAME passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," must match a config name defined in your ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js"),". We only support Webpack currently. Example:"),(0,o.kt)("p",null,"Given the following ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// lean.config.js\nconst { reactWebpackConfig1, reactWebpackConfig2 } = require("@my-org/webpack");\n\nmodule.exports = {\n  devServer: { port: 55555 },\n  webpack: {\n    reactConfig1: reactWebpackConfig1,\n    reactConfig2: reactWebpackConfig2,\n  },\n};\n')),(0,o.kt)("p",null,"You can run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"lean dev --config reactConfig1\n")),(0,o.kt)("p",null,"This command will look for a ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js")," in the current directory. If it doesn't find it, it'll look at a few parent directories. If ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js")," is found it will read the corresponding config."),(0,o.kt)("h4",{id:"--port-number"},"--port NUMBER"),(0,o.kt)("p",null,"This argument is ",(0,o.kt)("strong",{parentName:"p"},"optional"),". It will run a development server for your composable app at port NUMBER. If port NUMBER is in use the server won't start and the command will fail. Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"lean dev --port 56567 --config react\n")),(0,o.kt)("h3",{id:"lean-build"},(0,o.kt)("inlineCode",{parentName:"h3"},"lean build")),(0,o.kt)("p",null,"It builds the composable app where the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," that ran ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," is."),(0,o.kt)("p",null,"Arguments:"),(0,o.kt)("h4",{id:"--config-name-1"},"--config NAME"),(0,o.kt)("p",null,"This argument is ",(0,o.kt)("strong",{parentName:"p"},"requried"),". The NAME passed to config must match a config name defined in your ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js"),". We currently support Webpack only. Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"lean dev --config reactConfig1\n")),(0,o.kt)("p",null,"This command will look for a ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js")," in the current directory. If it doesn't find it, it'll look at a few parent directories. If ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js")," is found it will read the corresponding config."),(0,o.kt)("h3",{id:"lean-deploy"},(0,o.kt)("inlineCode",{parentName:"h3"},"lean deploy")),(0,o.kt)("p",null,"It deploys the composable app where the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," that ran ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy")," is."),(0,o.kt)("p",null,"Arguments:"),(0,o.kt)("h4",{id:"--use-package"},"--use PACKAGE"),(0,o.kt)("p",null,"This argument is ",(0,o.kt)("strong",{parentName:"p"},"optional"),". The PACKAGE passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"--use")," must be a package installed in the repository."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"lean deploy --use @leanjs/aws\n")),(0,o.kt)("p",null,"When running ",(0,o.kt)("inlineCode",{parentName:"p"},"lean deploy")," without ",(0,o.kt)("inlineCode",{parentName:"p"},"--use")," it'll use the default value defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy")," command, ",(0,o.kt)("inlineCode",{parentName:"p"},"use")," field:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// lean.config.js\n\nmodule.exports = {\n  devServer: { port: 55555 },\n  command: {\n    deploy: {\n      use: "@leanjs/aws",\n    },\n  },\n};\n')),(0,o.kt)("p",null,"If no package to ",(0,o.kt)("inlineCode",{parentName:"p"},"use")," is found then ",(0,o.kt)("inlineCode",{parentName:"p"},"lean deploy")," will error and exit with code 1."),(0,o.kt)("h2",{id:"config-examples"},"Config examples"),(0,o.kt)("p",null,"This is an example of a ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," for a composable app with all the Lean commands. Notice, this is not the root ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," if you use a monorepo."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "@my-org/composable-app-x",\n  "version": "1.0.0",\n  "scripts": {\n    "dev": "lean dev --config react",\n    "build": "lean build --config react",\n    "deploy": "lean deploy --use @leanjs/aws"\n  },\n  "devDependencies": {\n    "@leanjs/cli": "*"\n  }\n}\n')),(0,o.kt)("p",null,"This is an example of a ",(0,o.kt)("inlineCode",{parentName:"p"},"lean.config.js")," used by the above ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// lean.config.js\nconst { reactWebpackConfig } = require("@my-org/webpack");\n\nmodule.exports = {\n  devServer: { port: 55555 },\n  webpack: {\n    react: reactWebpackConfig,\n  },\n};\n')))}c.isMDXComponent=!0}}]);