"use strict";(self.webpackChunk_leanjs_website=self.webpackChunk_leanjs_website||[]).push([[806],{5318:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var a=t(7378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=d(t),m=r,k=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return t?a.createElement(k,l(l({ref:n},s),{},{components:t})):a.createElement(k,l({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3670:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=t(5773),r=(t(7378),t(5318));const o={},l="@leanjs/cli",i={unversionedId:"cli/README",id:"cli/README",title:"@leanjs/cli",description:"The LeanJS Cli provides commands to help you develop, build, and deploy your LeanJS micro-frontends. This package also includes the Centralized Dev Server.",source:"@site/../packages/cli/README.md",sourceDirName:"cli",slug:"/cli/",permalink:"/packages/cli/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"@leanjs/aws",permalink:"/packages/aws/"},next:{title:"@leanjs/core",permalink:"/packages/core/"}},p={},d=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Commands",id:"commands",level:2},{value:"<code>lean dev</code>",id:"lean-dev",level:3},{value:"--config NAME",id:"--config-name",level:4},{value:"--port NUMBER",id:"--port-number",level:4},{value:"<code>build</code>",id:"build",level:3},{value:"--config NAME",id:"--config-name-1",level:4},{value:"<code>deploy</code>",id:"deploy",level:3},{value:"--use PACKAGE",id:"--use-package",level:4},{value:"<code>package.json</code>",id:"packagejson",level:3},{value:"Centralized Dev Server",id:"centralized-dev-server",level:3}],s={toc:d};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"leanjscli"},"@leanjs/cli"),(0,r.kt)("p",null,"The LeanJS Cli provides commands to help you develop, build, and deploy your LeanJS micro-frontends. This package also includes the ",(0,r.kt)("a",{parentName:"p",href:"#centralized-dev-server"},"Centralized Dev Server"),"."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"If you use a monorepo (recommended) execute the following command at the root of your repository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add -D @leanjs/cli\n")),(0,r.kt)("p",null,"Then in the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," of each micro-frontend add the following ",(0,r.kt)("inlineCode",{parentName:"p"},"devDependency"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"devDependencies": {\n  "@leanjs/cli": "*"\n}\n')),(0,r.kt)("p",null,"If you don't use a monoreppo, run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn add -D @leanjs/cli")," in each micro-frontend repository."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"You need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"lean.config.js")," file at the root of the monorepo. You can also use separate repositories for each micro-frontend with a ",(0,r.kt)("inlineCode",{parentName:"p"},"lean.config.js")," in each micro-frontend repo, but it's not recommended."),(0,r.kt)("p",null,"The minimal ",(0,r.kt)("inlineCode",{parentName:"p"},"lean.config.js")," is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// lean.config.js\n\nmodule.exports = {\n  devServer: { port: 55555 }, // use any available port here\n};\n")),(0,r.kt)("h2",{id:"commands"},"Commands"),(0,r.kt)("p",null,"Once you install ",(0,r.kt)("inlineCode",{parentName:"p"},"@leanjs/cli"),", you can execute ",(0,r.kt)("inlineCode",{parentName:"p"},"lean")," commands from your ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),"/s ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," as follows:"),(0,r.kt)("h3",{id:"lean-dev"},(0,r.kt)("inlineCode",{parentName:"h3"},"lean dev")),(0,r.kt)("p",null,"It starts a development server specific for the micro-frontend defined in the same ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," and executes its entry point ",(0,r.kt)("inlineCode",{parentName:"p"},"src/remote.js|ts"),". This development server will either run the micro-frontend at a random available port (recommended) or at a given port (e.g. using ",(0,r.kt)("inlineCode",{parentName:"p"},"lean dev --port 56567"),")."),(0,r.kt)("p",null,"This command will also connect to the local ",(0,r.kt)("a",{parentName:"p",href:"#centralized-dev-server"},"Centralized Dev Server")," and register the micro-frontend with the address it's running at. If the local Centralized Dev Server is not running at the port defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"lean.config.js"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"devServer")," field, then ",(0,r.kt)("inlineCode",{parentName:"p"},"lean dev")," will start a new Centralized Dev Server."),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("h4",{id:"--config-name"},"--config NAME"),(0,r.kt)("p",null,"This argument is ",(0,r.kt)("strong",{parentName:"p"},"requried"),". The NAME passed to config must match a config name defined in your ",(0,r.kt)("inlineCode",{parentName:"p"},"lean.config.js"),". We currently support Webpack only. Example:"),(0,r.kt)("p",null,"Given the following ",(0,r.kt)("inlineCode",{parentName:"p"},"lean.config.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// lean.config.js\nconst { reactWebpackConfig1, reactWebpackConfig2 } = require("@my-org/webpack");\n\nmodule.exports = {\n  devServer: { port: 55555 },\n  webpack: {\n    reactConfig1: reactWebpackConfig1,\n    reactConfig2: reactWebpackConfig2,\n  },\n};\n')),(0,r.kt)("p",null,"You can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lean dev --config reactConfig1\n")),(0,r.kt)("p",null,"This command will look for a ",(0,r.kt)("inlineCode",{parentName:"p"},"lean.config.js")," in the current directory. If it doesn't find it, it'll look at a few parent directories."),(0,r.kt)("h4",{id:"--port-number"},"--port NUMBER"),(0,r.kt)("p",null,"This argument is ",(0,r.kt)("strong",{parentName:"p"},"optional"),". It will run a development server for your micro-frontend at port NUMBER. If port NUMBER is in use the server won't start and the command will fail. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lean dev --port 56567 --config react\n")),(0,r.kt)("h3",{id:"build"},(0,r.kt)("inlineCode",{parentName:"h3"},"build")),(0,r.kt)("p",null,"It builds the micro-frontend where the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," that ran ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," is."),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("h4",{id:"--config-name-1"},"--config NAME"),(0,r.kt)("p",null,"This argument is ",(0,r.kt)("strong",{parentName:"p"},"requried"),". The NAME passed to config must match a config name defined in your ",(0,r.kt)("inlineCode",{parentName:"p"},"lean.config.js"),". We currently support Webpack only. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lean dev --config reactConfig1\n")),(0,r.kt)("h3",{id:"deploy"},(0,r.kt)("inlineCode",{parentName:"h3"},"deploy")),(0,r.kt)("p",null,"It deploys the micro-frontend where the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," that ran ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy")," is."),(0,r.kt)("p",null,"Arguments:"),(0,r.kt)("h4",{id:"--use-package"},"--use PACKAGE"),(0,r.kt)("p",null,"This argument is ",(0,r.kt)("strong",{parentName:"p"},"optional"),". The PACKAGE passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"--use")," must be a package defined and installed in the devDependencies of the package."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lean deploy --use @leanjs/aws\n")),(0,r.kt)("p",null,"When running ",(0,r.kt)("inlineCode",{parentName:"p"},"lean deploy")," without ",(0,r.kt)("inlineCode",{parentName:"p"},"--use")," it'll use the default value defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"lean.config.js"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy")," command, ",(0,r.kt)("inlineCode",{parentName:"p"},"use")," field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// lean.config.js\n\nmodule.exports = {\n  devServer: { port: 55555 },\n  command: {\n    deploy: {\n      use: "@leanjs/aws",\n    },\n  },\n};\n')),(0,r.kt)("p",null,"If no package to ",(0,r.kt)("inlineCode",{parentName:"p"},"use")," is found then ",(0,r.kt)("inlineCode",{parentName:"p"},"lean deploy")," will error and exit with code 1."),(0,r.kt)("h3",{id:"packagejson"},(0,r.kt)("inlineCode",{parentName:"h3"},"package.json")),(0,r.kt)("p",null,"This is an example of a ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," for a micro-frontend with all the LeanJS commands. Notice, this is not the root ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," if you use a monorepo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "@my-org/micro-frontend-x",\n  "version": "1.0.0",\n  "scripts": {\n    "dev": "lean dev --config react",\n    "build": "lean build --config react",\n    "predeploy": "yarn build",\n    "deploy": "lean deploy --use @leanjs/aws"\n  },\n  "devDependencies": {\n    "@leanjs/cli": "*"\n  }\n}\n')),(0,r.kt)("h3",{id:"centralized-dev-server"},"Centralized Dev Server"),(0,r.kt)("p",null,"There are two development servers involved when you run a LeanJS micro-frontend."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"A dev server that watches your micro-frontend code, builds it, and serves it at a given local address (e.g. http://localhost:55556), e.g. Webpack Dev Server."),(0,r.kt)("li",{parentName:"ol"},"A centralized dev server that all micro-frontends connect to to send some information. This centralized dev server runs at the address defined in your ",(0,r.kt)("inlineCode",{parentName:"li"},"lean.config.js"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"devServer")," field:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// lean.config.js\n\nmodule.exports = {\n  devServer: { port: 55555 }, // \ud83d\udc48 centralized dev server\n};\n")),(0,r.kt)("p",null,"The LeanJS Cli ",(0,r.kt)("inlineCode",{parentName:"p"},"dev")," command starts the centralised dev server automatically when you run the first ",(0,r.kt)("inlineCode",{parentName:"p"},"lean dev"),". You can navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:{LEAN_CONFIG_JS_DEV_SERVER_PORT}")," (e.g. localhost:55555) and see what micro-frontends you are running locally. If you have not run ",(0,r.kt)("inlineCode",{parentName:"p"},"lean dev")," the centralised server won't be running."))}c.isMDXComponent=!0}}]);